---
title: "Wetland Fish Abundance Statistical Analysis"
author: "Jordan Sibley"
date: last-modified
execute: 
  eval: true
  message: false
  warning: false
format: 
  html:
    toc: true
---

## Background

## Set Up

```{r}
#| code-fold: true
#| code-summary: "See code"

# Load important packages 
library(tidyverse)
library(here)
library(dplyr)
```

## Data

This data comes from the SONGS Marine Mitigation database.

[Water Quality
Data](https://portal.edirepository.org/nis/mapbrowse?packageid=edi.657.5)

[Fish Abundance
Data](https://portal.edirepository.org/nis/mapbrowse?packageid=edi.647.6)

```{r}
#| code-fold: true
#| code-summary: "See code"

# Load in data
water_quality <- read_csv(here('data', 'wetland_ts_water_quality-2024-06-12_14-49-39.csv'))

fish_abund <- read_csv(here('data', 'wetland_ts_fish_seine-2024-06-12_14-50-31.csv'))
```

## Data Clean

#### Plan

**For Both data sets**:

-   Subset to years 2022 and 2023
-   Filter to Carpinteria Salt Marsh (CSM)

**For water quality data**:

-   Filter to survey hours (6am to 4pm) to get an average value for
    water quality parameters during the day
-   Create new column with only the date, not the time, to prepare for
    joining later
-   Calculate the average value over the time period for each water
    quality variable

**For fish abundance data**

-   Remove unnecessary columns
-   Create new column that gives water sampling area (seine area \*
    depth)
-   Find fish count per meter sampling area
-   Group by date and site to find the total fish density for given
    site/day
-   Create a binary `dredging` column that gives a `0` value for the
    pre-dredging year (2022) and a `1` for the post-dredging year (2023)

TEXT FOR BLOG POST

Group the fish abundance data that will give the total count of fish
sampled per m2 in each sample site for the day it was sampled.

This is especially helpful if sampling areas differ in size between
samples. Summing raw count values without considering the area might
lead to misleading results, as larger sampled areas naturally yield
higher counts.

This is going to group the number of hauls and group the A and B seines
together. The end result will be a count of fish sampled in either a
main channel or tidal creek for the sample day. This will make it easier
to match up the water quality variables, merging them based on date.

For the water quality data, I want to find the mean values of the water
quality parameters dor the time during the fish sampling. Since the fish
haul data only provides a date and not a time of collection, I subseted
the data to 6 AM to 4 PM as that is the time the fish abundance data was
taken.

To accomplish this I use the `group_by()` function for the date and then
`summarise()` and `mean()` to find the average value of the daylight
hours.

```{r}
#| code-fold: true
#| code-summary: "See code"

# ---- Water quality data cleaning 
# Filter water quality data
water_quality_clean <- water_quality %>% 
  filter(year %in% c(2022, 2023)) %>% 
  filter(wetland_code == "CSM") %>% 
  select(-c(instrument_type, wetland_code)) %>% 
  filter(hour(sample_datetime_gmt) >= 6 & hour(sample_datetime_gmt)) %>%  # filter to sampling hours 
  mutate(date = as.Date(sample_datetime_gmt)) # new column with just date

# Calculate averages 
water_quality_ave <- water_quality_clean %>% 
  group_by(date) %>% 
  summarise(temp_c_mean = mean(temperature_degrees_c),
            salinity_ppt_mean = mean(salinity_ppt), 
            salinity_practical_mean = mean(salinity_practical),
            dissolved_oxygen_mean = mean(dissolved_oxygen_concentration_mg_l))  

# ---- Fish survey data cleaning 
# Filter fish abundance 
fish_abund_clean <- fish_abund %>% 
  filter(year %in% c(2022, 2023)) %>% 
  filter(wetland_code == "CSM") %>% 
  select(-c(survey, module_code, seine_section_code, seine_sample_length, seine_sample_width, species_id)) %>%  # remove unnecessary columns
  mutate(sample_area_m2 = seine_sample_area * depth) %>%  # create count per m2
  mutate(count_per_m2 = count /sample_area_m2)

# Group by date and site name to get total count of fish sampled
fish_total <- fish_abund_clean %>% 
  group_by(date, tc_mc_code, habitat_code) %>% 
  summarise(total_density_per_m2 = sum(count_per_m2, na.rm = TRUE)) %>%
  mutate(habitat_code = recode(habitat_code,
                          "TC" = "Tidal creek",
                          "BNMC" = "Main channel")
  )

# Create a new column for the year
fish_total$year <- year(fish_total$date)

# Create binary column for pre dredging (2022) and post dredging (2023)
fish_total$dredging <- ifelse(fish_total$year == 2023, 1, 0)
```

### Join Data

Now that I have the average water quality values, I can join it with the
fish abundance data so that for each sample day, there are corresponding
water quality data for the day.

```{r}
fish_water <- merge(fish_total, water_quality_ave, by="date")
```

When I merged the data it now only has 67 rows when I was expecting it
to have 72 to match the fish abundance data. Now I will determine which
dates are missing.

```{r}
#| code-fold: true
#| code-summary: "See code"

# Perform a left join
fish_with_water_quality <- fish_total %>%
  left_join(water_quality_ave, by = "date")

# Check which rows in fish_total do not have a match in water_quality_ave
missing_dates <- fish_with_water_quality %>%
  filter(is.na(temp_c_mean)) 

# View the missing dates
missing_dates
```

This test shows that there is no water quality data for the dates
2023-09-06 and 2023-09-11. This means that for 5 fish collection dates
in the 2023 field season, there is no water quality data to accompany
it.

After checking the original water quality data it shows that there is a
gap in data from 09-10 until 09-14.

## Data visualization

Lets compare the fish density between the two years

### Boxplot to compare fish density between years.

The log scale was applied to the y-axis because the data contains a wide
range of fish density values, including many small values and a few
larger ones. This disparity can make it difficult to distinguish
differences in densities, as the larger values dominate the
visualization. The log transformation compresses the range of values,
allowing for better visualization of variations while maintaining the
relative differences.

```{r}
#| code-fold: true
#| code-summary: "See code"

# Box plot of fish density (log scaled)
ggplot(fish_total, aes(x = factor(year), y = total_density_per_m2, fill = factor(year))) +
  geom_boxplot() +
  scale_fill_manual(values = c("#8C510A", "#01665E")) +
  scale_y_log10() +  # Apply log scale to y-axis
  labs(
    title = "Fish Total Density per m² (Log Scale)",
    x = "Year",
    y = "Total Density per m² (log scale)",
    fill = "Year"
  ) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

```

### Seperating by habitat type: Main channel or tidal creek

Now, I will divide by habitat type, either main channel or tidal creek to compare fish densities. 

```{r}
#| code-fold: true
#| code-summary: "See code"

ggplot(fish_total, aes(x = factor(year), y = total_density_per_m2, fill = factor(year))) +
  geom_boxplot() +
  scale_fill_manual(values = c("#8C510A", "#01665E")) +
  scale_y_log10() +  # Apply log transformation to y-axis
  labs(
    title = "Fish Total Density per m² by Year and Habitat",
    x = "Year",
    y = "Log-Scaled Total Density per m²",
    fill = "Year"
  ) +
  facet_wrap(~ habitat_code, labeller = label_value) +  # Panels with updated labels
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    strip.text = element_text(size = 12, face = "bold")  # Adjust facet labels
  )
```

### Fish density with water qualtity parameters

Each water quality parameter (temperature, salinity, and dissolved oxygen) gets ploted against the fish densities to view a potential relationship between water quality and fish abundance. 

```{r}
#| code-fold: true
#| code-summary: "See code"

# ---- Fish density vs. each water quality  variable

# water temp 
ggplot(fish_water, aes(x = temp_c_mean, y = total_density_per_m2, color = factor(dredging))) + 
  geom_point(alpha = 0.7) + 
  geom_smooth(method = "lm", se = TRUE, lwd = 0.7) +
  scale_color_manual(values = c("0" = "#A6611A", "1" = "#5AB4AC"),
                     labels = c("Pre-Dredging", "Post-Dredging")) +
  labs(color = "Dredging Status",
       x = "Average water temperature (C)",
       y = "Fish density per m2",
       title = "Water Temp vs Fish Density") +
  theme_minimal()
  

# dissolved oxygen 
ggplot(fish_water, aes(x = dissolved_oxygen_mean, y = total_density_per_m2, color = factor(dredging))) + 
  geom_point(alpha = 0.7) + 
  geom_smooth(method = "lm", se = TRUE, lwd = 0.7) +
  scale_color_manual(values = c("0" = "#A6611A", "1" = "#5AB4AC"),
                     labels = c("Pre-Dredging", "Post-Dredging")) +
  labs(color = "Dredging Status",
       x = "Average dissolved oxygen concentration (mg/L)",
       y = "Fish density per m2",
       title = "Dissolved Oxygen vs Fish Density") +
  theme_minimal()

# salinity 
ggplot(fish_water, aes(x = salinity_ppt_mean, y = total_density_per_m2, color = factor(dredging))) + 
  geom_point() + 
  geom_smooth(method = "lm", se = TRUE, lwd = 0.7) +
  scale_color_manual(values = c("0" = "#A6611A", "1" = "#5AB4AC"),
                     labels = c("Pre-Dredging", "Post-Dredging")) +
  labs(color = "Dredging Status",
       x = "Average salinity (ppt)",
       y = "Fish density per m2",
       title = "Salinity vs Fish Density") +
  theme_minimal()
```

## Linear Regression Models

### Model 1: Multiple linear regressions with binary variable 

Dependent variable: fish density

Predictors: water quality parameters and binary dredging variable

```{r}
# Linear regression model of water quality parameters + dredging 
abund_model <- lm(total_density_per_m2 ~ temp_c_mean + salinity_ppt_mean + dissolved_oxygen_mean + dredging, data = fish_water)

summary(abund_model)

```

**Results**: None are significant.

Interpretation: - Coefficients: Show the effect size of each variable on
fish density. - Significance (p-values): Indicate whether the
relationships are statistically significant. - R-squared: Explains the
proportion of variance in fish density explained by your model.

## Test for interactions

To explore if the effect of water quality differs between pre- and
post-dredging periods, lets include interaction terms:

```{r}
# Linear model with interactions between water quality & dredging
model_interaction <- lm(total_density_per_m2 ~ temp_c_mean * dredging + salinity_ppt_mean * dredging + dissolved_oxygen_mean * dredging, data = fish_water)

summary(model_interaction)

```

**Results**: None are significant

I did not find statistically significant relationships between fish
density and water quality parameters (temperature, dissolved oxygen,
salinity) or dredging activity. This suggests these factors may not have
had a strong or measurable impact on fish density in my dataset.

Now, lets see more simply if there is a difference in fish density
between the two years separate of the water quality variables:

```{r}
# Linear regression of fish density with only dredging as a factor
model_dredging <- lm(total_density_per_m2 ~ dredging, data = fish_water)
summary(model_dredging)
```

**Result**: p-value is 0.40429. This is not a significant p-value which means we do
not have strong evidence that there is a difference in fish abundances
between 2022 and 2023.

## Habitat type

Last relationship I want to look at is if the habitat type (either main
channel or tidal creek) shows a difference in fish density, as the
dredging more directly impacted the main channel as opposed to the tidal
creeks

```{r}
model_habitat <- lm(total_density_per_m2 ~ dredging + habitat_code, data = fish_water)

summary(model_habitat)

```

**Results**:

Dredging does not appear to significantly impact fish density, as its
p-value is above 0.05.

Habitat type is significant, with Tidal Creek having a higher fish
density than Main channel. This indicates habitat type plays a
significant role in determining fish abundance in this wetland.
